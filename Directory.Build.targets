<Project>
  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup>
    <RuntimeFrameworkVersion Condition=" '$(TargetFramework)' == 'netcoreapp3.0' ">$(MicrosoftNETCoreAppPackageVersion)</RuntimeFrameworkVersion>
  </PropertyGroup>

  <!-- Properties which should be set after the project has been evaluated -->
  <PropertyGroup Condition=" '$(MSBuildProjectExtension)' == '.csproj' ">
    <PackageId Condition=" '$(PackageId)' == '' ">$(AssemblyName)</PackageId>
    <Description Condition=" '$(Description)' == ''">$(PackageId)</Description>
    <IsPackable Condition="'$(IsPackable)' == '' AND ( '$(IsUnitTestProject)' == 'true' OR '$(IsTestAssetProject)' == 'true' OR '$(IsBenchmarkProject)' == 'true' OR '$(IsSampleProject)' == 'true' ) ">false</IsPackable>
    <IsPackable Condition="'$(IsPackable)' == '' ">true</IsPackable>
  </PropertyGroup>

  <Import Project="eng\Baseline.Designer.props" />

  <PropertyGroup Condition=" '$(IsPackable)' != 'false' AND '$(IsServicingBuild)' == 'true' ">
    <IsPackable>$(PackagesInPatch.Contains(' $(PackageId);'))</IsPackable>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsPackable)' == 'true' AND '$(BaselinePackageVersion)' != '' AND '$(IsServicingBuild)' == 'true' ">
    <!-- This keeps assembly versions consistent across patches. If a package is not included in a patch, its assembly version should stay at the baseline. -->
    <AssemblyVersion>$(BaselinePackageVersion).0</AssemblyVersion>
    <!--
      Ideally, we would also set the project version to match the baseline in case NuGet turns a ProjectReference into a nuspec depenendency, but
      NuGet does not currently handle conflicts between packages and projects which have the same package id/version.

      See https://github.com/NuGet/Home/issues/6795
    -->
    <!-- <Version>$(BaselinePackageVersion)</Version> -->
    <!-- <PackageVersion>$(BaselinePackageVersion)</PackageVersion> -->
  </PropertyGroup>

  <PropertyGroup>
    <!-- Implementation projects are the projects which produce nuget packages or shipping assemblies. -->
    <IsImplementationProject Condition=" '$(IsImplementationProject)' == '' AND '$(IsTestAssetProject)' != 'true' AND '$(IsUnitTestProject)' != 'true' AND '$(IsBenchmarkProject)' != 'true' AND '$(IsSampleProject)' != 'true' ">true</IsImplementationProject>
    <!-- This determines whether a project is available as a <Reference> to other projects in this repo. -->
    <IsProjectReferenceProvider Condition=" '$(IsProjectReferenceProvider)' == '' AND '$(IsImplementationProject)' == 'true' AND '$(PackAsTool)' != 'true' ">true</IsProjectReferenceProvider>

    <!--
      Setting back to empty because this value is set by default to 'false' by Microsoft.Common.CurrentVersion.targets before this file is evaluated.
      Projects in this repo that need to suppress ref assembly generation should set DisableReferenceAssemblyGeneration=true instead.
    -->
    <ProduceReferenceAssembly Condition="'$(DisableReferenceAssemblyGeneration)' != 'true' "/>

    <!-- Instructs the compiler to produce reference assemblies. -->
    <ProduceReferenceAssembly Condition=" '$(ProduceReferenceAssembly)' == '' AND '$(IsProjectReferenceProvider)' == 'true' ">true</ProduceReferenceAssembly>
    <!-- Enables the target in eng/targets/Packaging.targets which puts the reference assembly in the nuget package. -->
    <PackageReferenceAssembly Condition=" '$(ProduceReferenceAssembly)' == 'true' ">true</PackageReferenceAssembly>

    <!--
      Copied from https://github.com/Microsoft/msbuild/blob/3a844ce00a873d8ca6ba0a8abc0c6b64f772d937/src/Tasks/Microsoft.Common.CurrentVersion.targets#L288.
      This is here to workaround for problems caused by setting ProduceReferenceAssembly=true after Microsoft.Common.CurrentVersion.targets is evaluated.
    -->
    <TargetRefPath Condition=" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' ">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>
  </PropertyGroup>

  <Import Project="eng\targets\Packaging.targets" Condition=" '$(MSBuildProjectExtension)' == '.csproj' " />
  <Import Project="eng\targets\ResolveReferences.targets" Condition=" '$(DisableReferenceRestrictions)' != 'true' AND '$(MSBuildProjectExtension)' == '.csproj' " />
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  <Import Project="eng\Workarounds.AfterArcade.targets" />
</Project>
